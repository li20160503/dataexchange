<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"
       default-lazy-init="false"
>

    <bean class="cn.gov.bjsat.dexc.DexcConfig" id="dexcConfig">
      <!--  <property name="zookeeperConnect" value="kafkaZK001:2181,kafkaZK002:2181,kafkaZK003:2181"/>-->
        <property name="zookeeperConnect" value="zookeeper1:2181,zookeeper2:2181,zookeeper3:2181"/>
        <property name="zookeeperSessionTimeoutms" value="60000"/>
        <property name="zookeeperConnectionTimeoutms" value="6000"/>
        <property name="rootPath" value="dataexchange"/>
        <property name="appPath" value="/apps"/>
        <property name="headPath" value="/head"/>
        <property name="schedulerPath" value="/schedulers"/>
        <property name="lockedPostfix" value="_LOCKED_"/>
        <property name="callbackTopicPostfix" value="_CB"/>
        <property name="topicReplications" value="2"/>
        <!--数据回调默认处理逻辑核心，比如hsf-->
        <property name="callbackRunnerCln" value="cn.gov.bjsat.dexc.ResultCallbackRunner"/>
        <!--结点唯一标识，不指定会在每次启动时自动生成一个uuid-->
        <!--指定后注意EDAS自动扩展后applicationUUID将会冲突-->
        <!--<property name="applicationUUID" value="uuid"/>-->
    </bean>




    <bean class="cn.gov.bjsat.dexc.app.ZookeeperConnector" init-method="init" destroy-method="destroy"
          id="zookeeperConnector"/>
    <bean class="cn.gov.bjsat.dexc.app.AppInstanceManager" id="appInstanceManager"/>
    <bean class="com.fasterxml.jackson.databind.ObjectMapper" id="objectMapper"/>

    <!-- kafka producer -->
    <bean id="producer" class="kafka.javaapi.producer.Producer">
        <constructor-arg ref="producerConfig"/>
    </bean>
    <bean id="producerConfig" class="kafka.producer.ProducerConfig">
        <!--参考：http://kafka.apache.org/documentation.html#producerconfigs-->
        <constructor-arg type="java.util.Properties">
            <props>
                <prop key="metadata.broker.list">${kafka}</prop>
                <prop key="serializer.class">kafka.serializer.StringEncoder</prop>
                <prop key="request.required.acks">1</prop>
                <prop key="producer.type">sync</prop>
                <prop key="message.send.max.retries">3</prop>
                <!--存储分区分配策略，默认是对key取模-->
                <prop key="partitioner.class">kafka.producer.DefaultPartitioner</prop>
            </props>
        </constructor-arg>
    </bean>


    <!-- kafka consumer -->
    <bean id="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!--最多50 <51-->
        <property name="corePoolSize" value="51"/>
        <!--线程池中的线程一旦添加就会被一直挂住，不能存在等待中的线程，一直不会被处理-->
        <property name="maxPoolSize" value="51"/>
        <!--不需要线程缓存-->
        <property name="queueCapacity" value="0"/>
  <!--      <property name="WaitForTasksToCompleteOnShutdown" value="false"/>-->
    </bean>

    <!--参考：http://kafka.apache.org/documentation.html#consumerconfigs-->
    <bean class="cn.gov.bjsat.dexc.kafka.ConsumerConfig4Spring" id="consumerConfig4Spring">
        <property name="props">
            <props value-type="java.util.Properties">
                <prop key="zookeeper.connect">${kafkaZK}</prop>
                <prop key="zookeeper.session.timeout.ms">60000</prop>
                <prop key="zookeeper.sync.time.ms">4000</prop>
                <prop key="zookeeper.connection.timeout.ms">6000</prop>
                <!--consumer定期commit offset-->
                <prop key="auto.commit.interval.ms">10000</prop>
                <!--
                consumer第一次启动时候，在zookeeper中没有初始的offset将从哪里开始读取
                smallest重新0开始读取
                largest从logfile的offset读取
                -->
                <prop key="auto.offset.reset">smallest</prop>
            </props>
        </property>
    </bean>


    <!--集群管理者-->

    <!--Scheduler-->
    <bean class="cn.gov.bjsat.dexc.scheduler.SchedulerFactoryBean" id="schedulerFactoryBean"/>
    <!--任务初始化-->
    <bean class="cn.gov.bjsat.dexc.service.ManagerApplicationListener"/>

    <!--pandora，注册pandora服务，注册在 dexc-manager 端，开发阶段不能通过以下方式注册，会找不到容器中的部分动态类-->
    <bean class="cn.gov.bjsat.dexc.hsf.service.DexcService" id="dexcService">
        <property name="objectMapper" ref="objectMapper"/>
        <property name="producer" ref="producer4Instance"/>
        <property name="repository" ref="appInstanceRepository"/>
    </bean>
    <dubbo:service interface="cn.gov.bjsat.dexc.hsf.callback.HsfDexcInterface" ref="dexcService" version="1.0.0"
                   group="DEXCSERVICE" ></dubbo:service>
    <dubbo:application name="dubbo-manager" />
    <dubbo:protocol name="dubbo" port="20880"/>
    <dubbo:registry address="zookeeper://zookeeper1:2181?backup=zookeeper2:2181,zookeeper3:2181" client="zkclient"/>

  <!--  <beans profile="dexc-manager-pandora">
        <bean class="com.taobao.hsf.app.spring.util.HSFSpringProviderBean" init-method="init">
            <property name="serviceInterface" value="cn.gov.bjsat.dexc.hsf.callback.HsfDexcInterface"/>
            <property name="serviceVersion" value="1.0.0"/>
            <property name="serviceGroup" value="DEXCSERVICE"/>
            <property name="target" ref="dexcService"/>
        </bean>
    </beans>-->


    <!--pandora-dev，EDAS开发模式，启动pandora和注册服务-->
   <!-- <beans profile="pandora-dev">
        <bean class="cn.gov.bjsat.dexc.PandoraDev" init-method="init" id="pandoraDev"/>
    </beans>-->


</beans>